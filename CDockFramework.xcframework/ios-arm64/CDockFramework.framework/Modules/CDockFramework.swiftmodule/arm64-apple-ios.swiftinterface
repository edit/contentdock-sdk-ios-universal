// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios14.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name CDockFramework
@_exported import CDockFramework
import Foundation
import Swift
import UIKit
@objc extension UIColor {
  @objc convenience dynamic public init?(hex: Swift.String)
  @objc dynamic public func hexStringToARGB() -> Swift.String
  @objc dynamic public func hexStringToRGBA() -> Swift.String
}
@objc public class CDRubberPageIndicatorControlConfig : ObjectiveC.NSObject {
  public var smallBubbleSize: CoreGraphics.CGFloat
  public var mainBubbleSize: CoreGraphics.CGFloat
  public var bubbleXOffsetSpace: CoreGraphics.CGFloat
  public var bubbleYOffsetSpace: CoreGraphics.CGFloat
  public var animationDuration: CoreFoundation.CFTimeInterval
  public var smallBubbleMoveRadius: CoreGraphics.CGFloat {
    get
  }
  public var backgroundColor: UIKit.UIColor
  public var smallBubbleColor: UIKit.UIColor
  public var bigBubbleColor: UIKit.UIColor
  @objc public init(smallBubbleSize: CoreGraphics.CGFloat = 16, mainBubbleSize: CoreGraphics.CGFloat = 40, bubbleXOffsetSpace: CoreGraphics.CGFloat = 12, bubbleYOffsetSpace: CoreGraphics.CGFloat = 8, animationDuration: CoreFoundation.CFTimeInterval = 0.2, backgroundColor: UIKit.UIColor = UIColor(red: 0.357, green: 0.196, blue: 0.337, alpha: 1.000), smallBubbleColor: UIKit.UIColor = UIColor(red: 0.961, green: 0.561, blue: 0.518, alpha: 1.000), bigBubbleColor: UIKit.UIColor = UIColor(red: 0.788, green: 0.216, blue: 0.337, alpha: 1.000))
  @objc deinit
  @objc override dynamic public init()
}
@objc public class CDRubberPageIndicatorControl : UIKit.UIControl {
  public var numberOfpage: Swift.Int {
    get
    set
  }
  @objc public var currentIndex: Swift.Int {
    @objc get
    @objc set
  }
  public var valueChange: ((Swift.Int) -> Swift.Void)?
  public var styleConfig: CDockFramework.CDRubberPageIndicatorControlConfig {
    get
    set
  }
  @objc public init(frame: CoreGraphics.CGRect, count: Swift.Int, config: CDockFramework.CDRubberPageIndicatorControlConfig)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  open func resetRubberIndicator()
  @objc public func handleTapGestureRecognizer(_ ges: UIKit.UITapGestureRecognizer)
  @objc public func setCurrentIndex(_ newIndex: Swift.Int, updateLayer: Swift.Bool)
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
@_inheritsConvenienceInitializers @objc public class CDockPage : ObjectiveC.NSObject {
  @objc public func setPageId(value: Swift.String, sender: Swift.String)
  @objc public func getPageId() -> Swift.String
  @objc public func setPageName(value: Swift.String, sender: Swift.String)
  @objc public func getPageName() -> Swift.String
  @objc public func setPageIsActive(value: Swift.Bool, sender: Swift.String)
  @objc public func isActive() -> Swift.Bool
  @objc public func getPageSwipeLeft() -> CDockFramework.CDockPage?
  @objc public func getPageSwipeRight() -> CDockFramework.CDockPage?
  @objc public func getPageSwipeUp() -> CDockFramework.CDockPage?
  @objc public func getPageSwipeDown() -> CDockFramework.CDockPage?
  @objc public func getSubPages() -> [CDockFramework.CDockPage]
  @objc public func showMe()
  @objc deinit
  @objc override dynamic public init()
}
